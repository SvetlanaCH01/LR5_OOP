#include "stdafx.h"
#include <iostream>
#include <string>
#include <fstream>
#include <conio.h>
#include <windows.h> 


using namespace std;
class Base
{
public:
	int a;

	Base(){//простой конструктор
		cout << "Вызов конструктора Base" << endl;
	}
	Base(Base *obj){//конструктор который принимает аргумент и преобразует его к типу конструктора
		cout << "Вызов конструктора преобразования *Base" << endl;
	}
	Base(Base &obj){//obj хранит адрес, когда объект передается по значению в качестве аргумента в функции
		cout << "Вызвался копирующий конструктор &Base" << endl;
	}

	virtual ~Base() {
		cout << "Виртуальный ~Base" << endl;
	}
	virtual string classname()
	{
		return "Базовый виртуальный метод string classname(), Base";
	}
	virtual bool isA(string classnm)//Базовый виртуальный метод string classname(), Base
	{
		if (classname() == classnm){//проверка на принадлежность
			cout << "true" << endl;
			return true;
		}
		else{
			cout << "false" << endl;
			return false;
		}
	}
	void method1_1(){
		cout << "Метод method1_1 класса Base. Вызовется method 2_1: "<<endl;
		method2_1();
	}
	void method1_2(){
		cout << "Метод method1_2 класса Base. Вызовется method 2_2:" << endl;
		method2_2();

	}
	void method2_1(){
		cout << "Метод method2_1 класса Base" << endl;
	}
	virtual void method2_2(){//виртуальный метод
		cout << "Виртуальный метод method2_2 класса Base" << endl;
	}

	void method3(){
		cout << "Метод method3 класса Base" << endl;
	}
	virtual void method4(){//виртуальный метод
		cout << "Виртуальный метод m4 класса Base" << endl;
	}
	virtual void redefinition(int d){//виртуальный метод переопределения переменной класса
		a = d;
		cout << "Виртуальный метод redefinition у Base " << endl;
	}
};
class Desc : public Base
{
public:
	int b;
	Desc(){
		cout << "Вызов конструктора Desc" << endl;
	}
	Desc(Desc *obj){
		cout << "Вызов конструктора преобразования *Desc" << endl;
	}
	Desc(Desc &obj){
		cout << "Вызов копирующего конструктора &Desc" << endl;
	}
	~Desc(){
		cout << "~Desc" << endl;
	}
	string classname(){
		return "Базовый виртуальный метод string classname(), Desc";
	}
	bool isA(string classnm)
	{
		if (classname() == classnm){
			cout << "true" << endl;
			return true;
		}
		else{
			cout << "false" << endl;
			return Base::isA(classnm);
		}
	}
	void method2_1(){//переопределенный метод 
		cout << "Метод method2_1 потомка Desc" << endl;
	}

	void method2_2(){//переопределенный метод 
		cout << "Метод method2_2 потомка Desc" << endl;
	}

	void method3(){
		cout << "Метод method3 потомка Desc" << endl;
	}
	void method4(){//виртуальный в базовом
		cout << "Метод method4 потомка Desc" << endl;
	}
	void redefinition(int d){
		b = d + 1;
		cout << "Метод redefinition у Desc " << endl;
	}
};
void func1(Base obj){
	cout << " Функция func1 obj" << endl;
	obj.redefinition(1);//виртуальный метод Base
}
void func2(Base *obj){
	cout << "Функция func2 *obj" << endl;
	obj->redefinition(2);
}
void func3(Base &obj){
	cout << "Функция func3 &obj" << endl;
	obj.redefinition(3);
}
void task1() {//приведение типов
	bool ys;
	Desc* b1 = new Desc;
	Base* b2 = ((Base*)(b1));//опасное приведение типов
	ys = b2->isA("Desc");
	if (ys == 1) {
		cout << "Принадлежит классу Desc " << endl;
	}
	else cout << "Принадлежит классу Base " << endl;

	Desc* b3 = new Desc;;
	Base* b4 = dynamic_cast<Base*>(b3);//безопасное приведение типов
	ys = b4->isA("Desc");
	if (ys == 1) {
		cout << "Принадлежит классу Desc " << endl;
	}
	else cout << "Принадлежит классу Base " << endl;
	cout << endl;
}
int main(){
	
	setlocale(LC_ALL, "RUS");
	cout << "Приведение типов\n" << endl;
	task1();// про приведение типов
	_getch();
	}

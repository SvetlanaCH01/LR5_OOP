#include "stdafx.h"
#include <iostream>
#include <string>
#include <fstream>
#include <conio.h>
#include <windows.h> 


using namespace std;
class Base
{
public:
	int a;

	Base(){//простой конструктор
		cout << "Вызов конструктора Base" << endl;
	}
	Base(Base *obj){//конструктор который принимает аргумент и преобразует его к типу конструктора
		cout << "Вызов конструктора преобразования *Base" << endl;
	}
	Base(Base &obj){//obj хранит адрес, когда объект передается по значению в качестве аргумента в функции
		cout << "Вызвался копирующий конструктор &Base" << endl;
	}

	virtual ~Base() {
		cout << "Виртуальный ~Base" << endl;
	}
	virtual string classname()
	{
		return "Базовый виртуальный метод string classname(), Base";
	}
	virtual bool isA(string classnm)//Базовый виртуальный метод string classname(), Base
	{
		if (classname() == classnm){//проверка на принадлежность
			cout << "true" << endl;
			return true;
		}
		else{
			cout << "false" << endl;
			return false;
		}
	}
};
class Desc : public Base
{
public:
	int b;
	Desc(){
		cout << "Вызов конструктора Desc" << endl;
	}
	Desc(Desc *obj){
		cout << "Вызов конструктора преобразования *Desc" << endl;
	}
	Desc(Desc &obj){
		cout << "Вызов копирующего конструктора &Desc" << endl;
	}
	~Desc(){
		cout << "~Desc" << endl;
	}
	string classname(){
		return "Базовый виртуальный метод string classname(), Desc";
	}
	bool isA(string classnm)
	{
		if (classname() == classnm){
			cout << "true" << endl;
			return true;
		}
		else{
			cout << "false" << endl;
			return Base::isa(classnm);
		}
	}
};
int main(){
	
		setlocale(LC_ALL, "RUS");

		_getch();
	}
